{% set version = "9.0.0" %}
{% set cuda_enabled = cuda_compiler_version != "None" %}
{% set build_ext_version = "3.0.0" %}
{% set build_ext = "cuda" if cuda_enabled else "cpu" %}
{% set proc_build_number = "0" %}

package:
  name: arrow-cpp-ext
  version: {{ version }}

build:
  number: 0
  # for cuda on win/linux, building with 9.2 is enough to be compatible with all later versions,
  # since arrow is only using libcuda, and not libcudart.
  skip: true  # [(win or linux) and cuda_compiler_version not in ("None", "10.2")]
  skip: true  # [osx and cuda_compiler_version != "None"]
  run_exports:
    - {{ pin_subpackage("arrow-cpp", max_pin="x.x.x") }}

outputs:
  - name: arrow-cpp-proc
    version: {{ build_ext_version }}
    build:
      number: {{ proc_build_number }}
      string: "{{ build_ext }}"
    test:
      commands:
        - exit 0
    about:
      home: http://github.com/apache/arrow
      license: Apache-2.0
      license_file:
        - LICENSE.txt
      summary: 'A meta-package to select Arrow build variant'

  - name: arrow-cpp
    script: build-arrow.sh  # [not win]
    script: bld-arrow.bat   # [win]
    version: {{ version }}
    build:
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ build_ext }}
      run_exports:
        - {{ pin_subpackage("arrow-cpp", max_pin="x.x.x") }}
      ignore_run_exports:
        - cudatoolkit
      track_features:
        {{ "- arrow-cuda" if cuda_enabled else "" }}
    requirements:
      build:
        - abseil-cpp >=20211102
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - cython                                 # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - gnuconfig                              # [osx and arm64]
        - libprotobuf
        - grpc-cpp
        # aws-sdk-cpp 1.8.* doesn't work with newer CMake
        - cmake <3.22
        - autoconf  # [unix]
        - ninja
        - make  # [unix]
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler("cuda") }}  # [cuda_compiler_version != "None"]
      host:
        # https://issues.apache.org/jira/browse/ARROW-15141
        #- aws-sdk-cpp 1.8.186
        - abseil-cpp >=20211102
        - boost-cpp >=1.70
        - brotli
        - bzip2
        - c-ares
        - gflags
        - glog
        - google-cloud-cpp
        - grpc-cpp
        - libprotobuf
        - clangdev 10  # [not (osx and arm64)]
        - llvmdev 10   # [not (osx and arm64)]
        - libutf8proc
        - lz4-c
        - numpy
        - orc  # [unix]
        - openssl
        - python
        - rapidjson
        - re2
        - snappy
        - thrift-cpp
        - xsimd
        - zlib
        - zstd
      run:
        - {{ pin_compatible('numpy', lower_bound='1.16') }}
        - python
      run_constrained:
        - arrow-cpp-proc * {{ build_ext }}
        - cudatoolkit >=9.2  # [cuda_compiler_version != "None"]

    about:
      home: http://github.com/apache/arrow
      license: Apache-2.0
      license_file:
        - LICENSE.txt
      summary: C++ libraries for Apache Arrow

    test:
      commands:
        - exit 0

  - name: pyarrow
    script: build-pyarrow.sh  # [not win]
    script: bld-pyarrow.bat   # [win]
    version: {{ version }}
    build:
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ build_ext }}
      ignore_run_exports:
        - cudatoolkit
      ignore_run_exports_from:
        - openssl
      track_features:
        {{ "- arrow-cuda" if cuda_enabled else "" }}
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - cython                                 # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - cmake
        - ninja
        - make  # [unix]
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        # pyarrow does not require nvcc but it needs to link against libraries in arrow-cpp=*=*cuda
        - {{ compiler("cuda") }}  # [cuda_compiler_version != "None"]
      host:
        - {{ pin_subpackage('arrow-cpp', exact=True) }}
        - clangdev 10  # [not (osx and arm64)]
        - cython
        - llvmdev 10   # [not (osx and arm64)]
        - numpy
        - openssl
        - python
        - setuptools
        - setuptools_scm
        - six
      run:
        - {{ pin_subpackage('arrow-cpp', exact=True) }}
        - {{ pin_compatible('numpy', lower_bound='1.16') }}
        # empty parquet-cpp metapackage, force old versions to be uninstalled
        # - parquet-cpp 1.5.1.*
        - python
      run_constrained:
        - arrow-cpp-proc * {{ build_ext }}
        - cudatoolkit >=9.2  # [cuda_compiler_version != "None"]

    about:
      home: http://github.com/apache/arrow
      license: Apache-2.0
      license_file:
        - LICENSE.txt
      summary: Python libraries for Apache Arrow

    test:
      # imports:
      #   - pyarrow
      #   - pyarrow.dataset
      #   - pyarrow.flight
      #   - pyarrow.gandiva  # [not (osx and arm64)]
      #   - pyarrow.orc      # [unix]
      #   - pyarrow.parquet
      #   - pyarrow.plasma   # [unix]
      #   - pyarrow.fs
      #   #- pyarrow._s3fs
      #   - pyarrow._hdfs
      #   # We can only test importing cuda package but cannot run when a
      #   # CUDA device is not available, for instance, when building from CI.
      #   # On Windows, we cannot even do that due to `nvcuda.dll` not being found, see
      #   # https://conda-forge.org/docs/maintainer/knowledge_base.html#nvcuda-dll-cannot-be-found-on-windows
      #   # However, we check below for (at least) the presence of a correctly-compiled module
      #   - pyarrow.cuda     # [cuda_compiler_version != "None" and not win]
      commands:
        - exit 0

  - name: pyarrow-tests
    script: build-pyarrow.sh  # [not win]
    script: bld-pyarrow.bat   # [win]
    version: {{ version }}
    build:
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ build_ext }}
      ignore_run_exports:
        - cudatoolkit
      ignore_run_exports_from:
        - openssl
      track_features:
        {{ "- arrow-cuda" if cuda_enabled else "" }}
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - cython                                 # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - cmake
        - ninja
        - make  # [unix]
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        # pyarrow does not require nvcc but it needs to link against libraries in arrow-cpp=*=*cuda
        - {{ compiler("cuda") }}  # [cuda_compiler_version != "None"]
      host:
        - {{ pin_subpackage('arrow-cpp', exact=True) }}
        - {{ pin_subpackage('pyarrow', exact=True) }}
        - clangdev 10  # [not (osx and arm64)]
        - cython
        - llvmdev 10   # [not (osx and arm64)]
        - numpy
        - python
        - openssl
        - setuptools
        - setuptools_scm
        - six
      run:
        - {{ pin_subpackage('pyarrow', exact=True) }}
        - python
      run_constrained:
        - arrow-cpp-proc * {{ build_ext }}
        - cudatoolkit >=9.2  # [cuda_compiler_version != "None"]

    about:
      home: http://github.com/apache/arrow
      license: Apache-2.0
      license_file:
        - LICENSE.txt
      summary: Python test files for Apache Arrow

    test:
      commands:
        - exit 0

about:
  home: http://github.com/apache/arrow
  license: Apache-2.0
  license_file:
    - LICENSE.txt
  summary: C++ and Python libraries for Apache Arrow

extra:
  recipe-maintainers:
    - wesm
    - xhochy
    - leifwalsh
    - jreback
    - cpcloud
    - pcmoritz
    - robertnishihara
    - siddharthteotia
    - kou
    - kszucs
    - pitrou
    - pearu
    - nealrichardson
    - jakirkham
