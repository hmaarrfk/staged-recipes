Only in enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913: .hgignore
Only in enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913: .hgtags
Only in enblend-enfuse-4.2: aclocal.m4
Only in enblend-enfuse-4.2: ar-lib
diff -u enblend-enfuse-4.2/CMakeLists.txt enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/CMakeLists.txt
--- enblend-enfuse-4.2/CMakeLists.txt	2016-03-28 13:17:04.000000000 -0400
+++ enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/CMakeLists.txt	2019-11-26 08:00:20.000000000 -0500
@@ -6,7 +6,7 @@
 #                  , Harry van der Wolf <hvdwolf@gmail.com>
 # Original file from lyx-project, heavily modified
 #
-cmake_minimum_required(VERSION 2.8)
+cmake_minimum_required(VERSION 3.8)
 
 set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true)
 
@@ -98,12 +98,15 @@
 
 # Configurable options
 OPTION(ENABLE_OPENMP "OpenMP Support" OFF)
+OPTION(ENABLE_OPENCL "OpenCL Support" OFF)
 OPTION(ENABLE_TCMALLOC "TCmalloc Support" OFF)
 IF(NOT WIN32)
 # dynamic loading on windows is supported by own class
 OPTION(ENABLE_DLOPEN "Dlopen Support" ON)
 ENDIF()
 OPTION(DOC "Create Documentation" OFF)
+OPTION(PREFER_SEPARATE_OPENCL_SOURCE "Define if you want to access OpenCL files, not compile-in their string equivalents" OFF)
+OPTION(ENABLE_METADATA_TRANSFER "Support for copying of metadata into output files" OFF)
 
 IF(NOT CMAKE_CL_64)
   OPTION(ENABLE_SSE2 "SSE2 Support(Release builds only)" OFF)
@@ -113,20 +116,19 @@
 IF(NOT WIN32)
   OPTION(ENABLE_DMALLOC "Use the dmalloc debugging package" OFF)
   OPTION(ENABLE_DMALLOC_FUNC_CHECK "Enable dmalloc function checking" OFF)
+  SET(DEFAULT_OPENCL_PATH "/usr/local/share/enblend/kernels:/usr/share/enblend/kernels" CACHE STRING "Default search path for OpenCL files")
 ELSE(NOT WIN32)
   SET(ENABLE_DMALLOC OFF CACHE INTERNAL "")
   SET(ENABLE_DMALLOC_FUNC_CHECK OFF CACHE INTERNAL "")
 ENDIF(NOT WIN32)
 
-# Compiler specific tweaks and optimizations
-# Microsoft Visual C++ compiler does not need any addtional switches for C++11
-# so check only other compilers
-IF (NOT MSVC)
-  FIND_PACKAGE(CXX11Compiler)
-  IF(NOT CXX11COMPILER_FOUND)
-    MESSAGE(FATAL_ERROR "A C++11 compatible compiler is required.")
-  ENDIF()
-  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX11_FLAG}")
+# we need a C++17 compliant compiler
+SET(CMAKE_CXX_STANDARD 17)
+SET(CMAKE_CXX_STANDARD_REQUIRED ON)
+# MSVC 2017 has removed some deprecated functions with C++17
+# but there are still used by vigra, so bring they back for now
+IF(MSVC_VERSION GREATER 1900)
+  ADD_DEFINITIONS(-D_HAS_AUTO_PTR_ETC=1)
 ENDIF()
 
 IF(CMAKE_COMPILER_IS_GNUCXX)
@@ -189,6 +191,7 @@
 # Required Libraries first
 FIND_PACKAGE(LCMS2 REQUIRED)
 ADD_DEFINITIONS(-DHAVE_LIBLCMS2)
+ADD_DEFINITIONS(-DCMS_NO_REGISTER_KEYWORD)
 FIND_PACKAGE(TIFF REQUIRED)
 FIND_PACKAGE(Perl REQUIRED)
 # this one is needed in doc. (Especially the program "convert")
@@ -197,36 +200,21 @@
 ADD_DEFINITIONS(-DHAVE_LIBGSL)
 ADD_DEFINITIONS(-DHAVE_LIBGSLCBLAS)
 LIST(APPEND common_libs ${LCMS2_LIBRARIES} ${TIFF_LIBRARIES} ${GSL_LIBRARIES})
+IF(CMAKE_COMPILER_IS_GNUCXX)
+# gnu c++ requires -lstdc++fs for C++17 <filesystem> support
+LIST(APPEND common_libs stdc++fs)
+ENDIF()
 include_directories(${TIFF_INCLUDE_DIR} ${LCMS2_INCLUDE_DIR})
 
 # Platform specifics required libraries
 IF(WIN32)
-  SET(Boost_USE_STATIC_LIBS ON)
   # path for getopt library
   INCLUDE_DIRECTORIES(${TOP_SRC_DIR}/src/win32helpers)
 ENDIF(WIN32)
 
-# Boost headers are required, but filesystem is optional
-if(WIN32)
-  IF( NOT Boost_root_suffix )
-    SET( Boost_root_suffix _1_51_0 CACHE STRING "suffix of boost root dir." FORCE )
-  ENDIF( NOT Boost_root_suffix )
-  SET(Boost_USE_STATIC_LIBS ON)
-  if (NOT BOOST_ROOT AND NOT $ENV{BOOST_ROOT} STREQUAL "")
-    set(BOOST_ROOT $ENV{BOOST_ROOT})
-  else(NOT BOOST_ROOT AND NOT $ENV{BOOST_ROOT} STREQUAL "")
-    set(BOOST_ROOT ${SOURCE_BASE_DIR}/boost${Boost_root_suffix})
-  endif(NOT BOOST_ROOT AND NOT $ENV{BOOST_ROOT} STREQUAL "")
-endif()
-
-# Boost headers are required
-FIND_PACKAGE(Boost 1.55 REQUIRED)
-
 #check some header and functions
 include(ConfigureChecks.cmake)
 
-include_directories(${Boost_INCLUDE_DIR})
-
 # Optional Libraries
 FIND_PACKAGE(ZLIB)
 FIND_PACKAGE(JPEG)
@@ -275,6 +263,15 @@
   MESSAGE(STATUS "OpenEXR support disabled")
 ENDIF(OPENEXR_FOUND)
 
+IF(ENABLE_METADATA_TRANSFER)
+  FIND_PACKAGE(EXIV2 REQUIRED)
+  SET(HAVE_EXIV2 ON)
+  list(APPEND common_libs ${EXIV2_LIBRARIES})
+  include_directories(${EXIV2_INCLUDE_DIR})
+ELSE()
+  SET(HAVE_EXIV2 OFF)
+ENDIF()
+
 # Now that packages are / are not detected, handle config options
 
 IF(ENABLE_OPENMP)
@@ -282,6 +279,13 @@
   add_definitions(${OpenMP_CXX_FLAGS})
 ENDIF(ENABLE_OPENMP)
 
+IF(ENABLE_OPENCL)
+  FIND_PACKAGE(OpenCL REQUIRED)
+  INCLUDE_DIRECTORIES(${OPENCL_INCLUDE_DIR})
+  LIST(APPEND common_libs ${OPENCL_LIBRARY})
+  add_definitions("-D_OPENCL=1")
+ENDIF(ENABLE_OPENCL)
+
 IF(ENABLE_SSE2)
   set_sse_cxx_flags()
 ENDIF(ENABLE_SSE2)
@@ -417,7 +421,7 @@
     endif()	
     set(PAPERSIZE "a4" CACHE STRING "Papersize for some converters: a4, a5, b5, executive, legal, letter")
     set(PRINTRESOLUTION "600" CACHE STRING "Resolution for some converters in dots-per-inch")
-    set(DYNAMIC_TEX_PREAMBLE "\\def\\finishdynamicpreamble{\\relax}" CACHE STRING "LaTeX commands to add to preamble")
+    set(DYNAMIC_TEX_PREAMBLE "\\def\\finishdynamicpreamble{\\overfullrule=2pt\\relax}" CACHE STRING "LaTeX commands to add to preamble")
 endif()
 
 MESSAGE(STATUS "")
@@ -434,9 +438,23 @@
 MESSAGE(STATUS "Features Enabled:")
 IF(NOT WIN32)
 MESSAGE(STATUS "enable malloc debugging: ${ENABLE_DMALLOC}")
+MESSAGE(STATUS "Dlopen Support:          ${ENABLE_DLOPEN}")
 ENDIF(NOT WIN32)
 MESSAGE(STATUS "use OpenMP:              ${ENABLE_OPENMP}")
+MESSAGE(STATUS "use OpenCL:              ${ENABLE_OPENCL}")
 MESSAGE(STATUS "use TCmalloc:            ${ENABLE_TCMALLOC}")
+IF(NOT WIN32 AND ENABLE_OPENCL)
+MESSAGE(STATUS "Search path for OpenCL:  ${DEFAULT_OPENCL_PATH}")
+ENDIF()
+IF(ENABLE_OPENCL)
+  IF(PREFER_SEPARATE_OPENCL_SOURCE)
+    MESSAGE(STATUS "OpenCL sources:          Use separate files")
+  ELSE()
+    MESSAGE(STATUS "OpenCL sources:          Use build-in strings")
+  ENDIF()
+ENDIF()
+MESSAGE(STATUS "Metadata transfer:       ${HAVE_EXIV2}")
+MESSAGE(STATUS "Build documentation:     ${DOC}")
 MESSAGE(STATUS "")
 MESSAGE(STATUS "Image Formats Enabled:")
 MESSAGE(STATUS "OpenEXR:                 ${OPENEXR_FOUND}")
Common subdirectories: enblend-enfuse-4.2/CMakeModules and enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/CMakeModules
Only in enblend-enfuse-4.2: compile
Only in enblend-enfuse-4.2: config.guess
diff -u enblend-enfuse-4.2/config.h.cmake enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/config.h.cmake
--- enblend-enfuse-4.2/config.h.cmake	2016-03-28 13:17:04.000000000 -0400
+++ enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/config.h.cmake	2019-11-26 08:00:20.000000000 -0500
@@ -31,6 +31,12 @@
 /* define to 1 if you have dlfcn.h header file and dl lib. */
 #cmakedefine HAVE_DL 1
 
+/* define to 1 if you have opencl.h header file in "CL" dir. */
+#cmakedefine HAVE_CL_CL_HPP 1
+
+/* define to 1 if you have opencl.h header file in "OpenCL" dir. */
+#cmakedefine HAVE_OPENCL_CL_HPP 1
+
 /* Define to 1 if the system has the type `_Bool'. */
 /* #undef HAVE__BOOL */
 
@@ -71,18 +77,6 @@
 /* Define to 1 if strerror_r returns char *. */
 #cmakedefine STRERROR_R_CHAR_P 1
 
-/* Define to 1 if std::as_const (C++ 17) is available */
-#cmakedefine HAVE_AS_CONST
-
-/* workaround for older boost versions <1.55 */
-#cmakedefine HAVE_BOOST_FALLTHROUGH 1
-#ifndef HAVE_BOOST_FALLTHROUGH
-#define BOOST_FALLTHROUGH ((void) 0)
-#endif
-
-/* Define to if <filesystem> is available */
-#cmakedefine HAVE_STD_FILESYSTEM 1
-
 /* Version number of package */
 #define VERSION "${ENBLEND_VERSION_ONLY}"
 
@@ -102,9 +96,18 @@
   #define size_t unsigned int
 #endif
 
+/* Define to the implicit search path for OpenCL kernels. */
+#define DEFAULT_OPENCL_PATH "${DEFAULT_OPENCL_PATH}"
+
+/* Prefer separate OpenCL kernels or use build-in strings. */
+#cmakedefine PREFER_SEPARATE_OPENCL_SOURCE 1
+
 /* MSVC compiler is using _DEBUG instead of DEBUG, so redefine here */
 #if defined _DEBUG && !defined DEBUG
 #define DEBUG 1
 #endif
 
+/* Defined if exiv2 library is available for metadata transfer */
+#cmakedefine HAVE_EXIV2 1
+
 #endif
\ No newline at end of file
Only in enblend-enfuse-4.2: config.h.in
Only in enblend-enfuse-4.2: config.sub
Only in enblend-enfuse-4.2: configure
diff -u enblend-enfuse-4.2/configure.ac enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/configure.ac
--- enblend-enfuse-4.2/configure.ac	2016-03-28 05:44:02.000000000 -0400
+++ enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/configure.ac	2019-11-26 08:00:20.000000000 -0500
@@ -13,8 +13,7 @@
 AM_SILENT_RULES()
 
 AC_PROG_CXX
-AX_CXX_COMPILE_STDCXX_11(ext)
-AC_CXX_AS_CONST
+AX_CXX_COMPILE_STDCXX_17(ext)
 AC_PROG_CC
 AC_PROG_AR
 AM_PROG_AR
@@ -46,8 +45,8 @@
           AC_MSG_CHECKING([for on-demand dynamic linking])
           save_ldflags="$LDFLAGS"
           LDFLAGS="-Wl,--as-needed -Wl,--no-copy-dt-needed-entries ${LDFLAGS}"
-          AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <string.h>]],
-                                          [[strlen("foo")]])],
+          AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <cstring>]],
+                                          [[std::strlen("foo")]])],
                          [AC_MSG_RESULT(yes);
                           have_on_demand_dynamic_linking=yes],
                          AC_MSG_RESULT(no))
@@ -60,6 +59,15 @@
 
 # Checks for libraries.
 
+STDCXX_FILESYSTEM_LIBRARY='-lstdc++fs'
+AC_MSG_CHECKING([whether we must link with an extra library to get C++17 filesystem support])
+AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <filesystem>]],
+                                [[std::filesystem::path p;
+                                  p.parent_path()]])],
+               [AC_MSG_RESULT(no)],
+               [AC_MSG_RESULT(yes)
+                LIBS="$LIBS $STDCXX_FILESYSTEM_LIBRARY"])
+
 # We check for TCMalloc so early to make it the last user library on
 # the linker command line.  It will then gobble all undefined
 # references to malloc(3) and free(3) and thus relieve the O/S even
@@ -79,12 +87,8 @@
        fi])
 
 AC_CHECK_LIB([m], [sqrt])
-AC_CHECK_LIB([gslcblas], [cblas_dgemm])
-AC_CHECK_LIB([gsl], [gsl_blas_dgemm])
 
-AC_CHECK_LIB(z, gzopen,
-             [],
-             AC_MSG_NOTICE([Compiling without libz.]), [])
+AC_CHECK_LIB(z, gzopen, [], AC_MSG_NOTICE([Compiling without libz.]), [])
 AC_CHECK_LIB(jpeg, jpeg_finish_compress,
              [LIBS="-ljpeg ${LIBS}"; AC_DEFINE(HasJPEG, 1, [Define if you have the jpeg library])],
              AC_MSG_NOTICE([Compiling without support for jpeg files.]), [])
@@ -94,9 +98,6 @@
 AC_CHECK_LIB(tiff, TIFFOpen,
              [LIBS="-ltiff ${LIBS}"; AC_DEFINE(HasTIFF, 1, [Define if you have the tiff library])],
              AC_MSG_ERROR([libtiff is required to compile Enblend.]), [])
-AC_CHECK_LIB(lcms2, cmsCreateTransform,
-             [],
-             AC_MSG_ERROR([liblcms2 is required to compile Enblend.]), [])
 
 AC_MSG_CHECKING([if OpenEXR is wanted])
 AC_ARG_WITH([openexr],
@@ -108,7 +109,6 @@
       [AC_MSG_NOTICE([disabling OpenEXR])
        have_exr=no],
       [if test "$with_openexr" = yes || test "$with_openexr" = check; then
-          AC_MSG_RESULT(yes)
           PKG_CHECK_MODULES(OPENEXR, OpenEXR >= 1.0,
                             [AC_DEFINE(HasEXR, 1, [Define if you have EXR library])
                              have_exr=yes],
@@ -118,7 +118,6 @@
           CFLAGS="${OPENEXR_CFLAGS} $CFLAGS"
           CXXFLAGS="${OPENEXR_CFLAGS} $CXXFLAGS"
        else
-          AC_MSG_RESULT(no)
           have_exr=no
        fi])
 
@@ -134,6 +133,7 @@
                AC_MSG_RESULT(yes),
                [AC_MSG_RESULT(no)
                 AC_MSG_ERROR([libvigraimpex is required to compile Enblend.])])
+AC_MSG_CHECKING([whether Vigra import/export-library is sufficiently recent])
 AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <vigra/imageinfo.hxx>
                                   #include <vigra/impexalpha.hxx>]],
                                 [[vigra::BRGBImage image;
@@ -145,6 +145,79 @@
                [AC_MSG_RESULT(no)
                 AC_MSG_ERROR([Vigra was found, but it was not recent enough.])])
 
+use_exiv2=no
+AC_ARG_WITH([exiv2],
+            [AS_HELP_STRING([--with-exiv2], [use Exiv2 library @<:@default=check@:>@])],
+            [],
+            [with_exiv2=check])
+AS_IF([test "$with_exiv2" = check -o "$with_exiv2" = yes],
+      [AC_MSG_CHECKING([for Exiv2 library])
+       SAVED_LIBS=$LIBS
+       LIBS="$LIBS -lexiv2"
+       AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <exiv2/image.hpp>]],
+                                       [[Exiv2::Image* image {nullptr};
+                                         image->iptcData();]])],
+                      [AC_MSG_RESULT(yes)
+                       use_exiv2=yes
+                       AC_DEFINE(HAVE_EXIV2, 1, [Define if you have the Exiv2 library])],
+                      [AC_MSG_RESULT(no)
+                       LIBS="$SAVED_LIBS"])])
+if test "$use_exiv2" = yes; then
+  AC_MSG_CHECKING([whether Exiv2 library is sufficiently recent])
+  AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <exiv2/image.hpp>]],
+                                  [[Exiv2::Image::UniquePtr p {nullptr}]])],
+                 AC_MSG_RESULT(yes),
+                 [AC_MSG_RESULT(no)
+                  use_exiv2=no
+                  LIBS="$SAVED_LIBS"
+                  if test "$with_exiv2" = check; then
+                    AC_MSG_WARN([Exiv2 was found, but it was not recent enough.])
+                  else
+                    AC_MSG_ERROR([Exiv2 was found, but it was not recent enough.])
+                  fi])
+fi
+
+AC_MSG_CHECKING([for support of partially static linking])
+original_LIBS="${LIBS}"
+LIBS="-Wl,-Bstatic -lm -Wl,-Bdynamic ${LIBS}"
+AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <math.h>]],
+                                [[sin(0.5)]])],
+               [AC_MSG_RESULT(yes);
+                partially_static_linking_support=yes],
+               [AC_MSG_RESULT(no);
+                partially_static_linking_support=no])
+LIBS="${original_LIBS}"
+
+STATIC_LIBS=""
+partially_static_linking=no
+AC_ARG_ENABLE([partially-static-linking],
+              AC_HELP_STRING([--enable-partially-static-linking],
+                             [static link of performance critical libraries @<:@default=no@:>@]),
+              [partially_static_linking=$enableval],
+              [partially_static_linking=no])
+
+if test "$partially_static_linking_support" = yes && test "$partially_static_linking" = yes; then
+  dnl https://www.gnu.org/software/gsl/manual/html_node/Linking-with-an-alternative-BLAS-library.html
+  AC_CHECK_LIB(atlas, ATL_cputime, [], [])
+  AC_CHECK_LIB(cblas, cblas_dgemm, [have_cblas=true], [have_cblas=false], [-latlas])
+  if $have_cblas; then
+    STATIC_LIBS="-lcblas -latlas ${STATIC_LIBS}"
+    AC_CHECK_LIB(gsl, gsl_blas_dgemm, [STATIC_LIBS="-lgsl ${STATIC_LIBS}"], [], [-lcblas -latlas])
+  else
+    AC_CHECK_LIB(gslcblas, cblas_dgemm, [STATIC_LIBS="-lgslcblas ${STATIC_LIBS}"])
+    AC_CHECK_LIB(gsl, gsl_blas_dgemm, [STATIC_LIBS="-lgsl ${STATIC_LIBS}"], [], [-lgslcblas])
+  fi
+
+  AC_CHECK_LIB(lcms2, cmsCreateTransform, [STATIC_LIBS="-llcms2 ${STATIC_LIBS}"])
+  AC_SUBST(STATIC_LIBS, ["-Wl,-Bstatic ${STATIC_LIBS} -Wl,-Bdynamic"])
+else
+  AC_CHECK_LIB(gslcblas, cblas_dgemm)
+  AC_CHECK_LIB(gsl, gsl_blas_dgemm)
+  AC_CHECK_LIB(lcms2, cmsCreateTransform)
+  AC_SUBST(STATIC_LIBS)
+fi
+
+
 # Memory allocation debug support
 AC_MSG_CHECKING([if malloc debugging is wanted])
 AC_ARG_WITH(dmalloc,
@@ -214,7 +287,7 @@
 
 AC_CHECK_HEADERS([fenv.h limits.h stdlib.h string.h unistd.h])
 
-AC_CHECK_HEADER([sys/times.h],
+AC_CHECK_HEADER(sys/times.h,
                 [AC_DEFINE([HAVE_SYS_TIMES_H], [1], [Define if <sys/times.h> exists.])])
 AC_CHECK_HEADER(tiffio.h, [],
                 AC_MSG_ERROR([libtiff-devel header files are required to compile Enblend.]))
@@ -228,12 +301,6 @@
 AC_CHECK_HEADER(vigra/basicimage.hxx, [],
                 AC_MSG_ERROR([Vigra "basicimage.hxx" header file is required to compile Enblend.]))
 
-AX_BOOST_BASE([1.55], [],
-              AC_MSG_ERROR([Boost version 1.55 or later is required to compile Enblend.]))
-
-AC_CHECK_HEADER(boost/optional.hpp, [],
-                AC_MSG_ERROR([Boost "optional" header file is required to compile Enblend.]))
-
 AC_CHECK_HEADER(gsl/gsl_errno.h, [],
                 AC_MSG_ERROR([GNU Scientific Library (GSL) header file "gsl_errno" is required to compile Enblend.]))
 AC_CHECK_HEADER(gsl/gsl_min.h, [],
@@ -287,16 +354,6 @@
 AC_C99_FUNC_LRINT
 AC_C99_FUNC_LRINTF
 
-AC_MSG_CHECKING([for BOOST_FALLTHROUGH])
-AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[#include <boost/config/suffix.hpp>]],
-                                   [[BOOST_FALLTHROUGH]])],
-                  [ac_found=yes; AC_MSG_RESULT([yes])],
-                  [ac_found=no]; AC_MSG_RESULT([no]))
-if test "$ac_found" = no; then
-    AC_DEFINE(BOOST_FALLTHROUGH, [((void) 0)],
-              [Define if Boost is not recent enough to define BOOST_FALLTHROUGH itself])
-fi
-
 AC_PATH_PROG(PERL, perl, false)
 if test "$PERL" = false; then
     AC_MSG_ERROR(cannot find perl)
@@ -316,15 +373,9 @@
 
 can_build_doc=yes
 
-AC_PATH_PROGS(LATEX, [latex elatex lambda],
-              [AC_MSG_WARN(missing LaTeX translator)
-               can_build_doc=no
-               missing_for_doc="$missing_for_doc latex"])
-AC_PATH_PROG(PDFLATEX, pdflatex,
-             [AC_MSG_WARN([missing PDFLaTeX translator -- no direct translation of LaTeX to PDF available])
-              missing_for_doc="$missing_for_doc pdflatex"])
+AC_PATH_PROGS(LATEX, [latex elatex lambda])
 
-if test "$latex" != 'no'
+if test -n "$LATEX"
 then
   AC_LATEX_CLASS(report,report,[],
                  [AC_MSG_WARN(missing document class report.cls)
@@ -351,6 +402,10 @@
                                [AC_MSG_WARN(missing LaTeX package package_name)
                                 can_build_doc=no
                                 missing_for_doc="$missing_for_doc package_name.sty"])])
+else
+  AC_MSG_WARN(missing LaTeX translator)
+  can_build_doc=no
+  missing_for_doc="$missing_for_doc latex"
 fi
 
 if test "$PERL" != false; then
@@ -381,6 +436,13 @@
 fi
 
 
+AC_PATH_PROG(PDFLATEX, pdflatex)
+if test -z "$PDFLATEX"; then
+     AC_MSG_WARN([missing PDFLaTeX translator -- no direct translation of LaTeX to PDF available])
+     missing_for_doc="$missing_for_doc pdflatex"
+fi
+
+
 AC_PATH_PROG(TEXLOGANALYSER, texloganalyser, cat)
 if test "$TEXLOGANALYSER" = cat; then
     AC_MSG_WARN([cannot find texloganalyser; will substitute cat(1)])
@@ -480,7 +542,7 @@
 
 
 AC_ARG_VAR(DYNAMIC_TEX_PREAMBLE, [LaTeX commands to add to top of preamble])
-DYNAMIC_TEX_PREAMBLE=\\def\\finishdynamicpreamble{\\relax}
+DYNAMIC_TEX_PREAMBLE=\\def\\finishdynamicpreamble{\\overfullrule=2pt\\relax}
 
 
 AC_MSG_CHECKING(whether to enable debugging)
@@ -500,23 +562,6 @@
     enable_debug=no
 fi
 
-AC_MSG_CHECKING(whether to enable image cache)
-image_cache_default="no"
-AC_ARG_ENABLE(image_cache,
-              AS_HELP_STRING([--enable-image-cache],
-                             [allow for processing of large images @<:@default=no@:>@]),
-              [enable_image_cache=$enableval],
-              [enable_image_cache=$image_cache_default])
-if test "$enable_image_cache" = yes; then
-    AC_DEFINE(CACHE_IMAGES, 1,
-              [Define if you want to compile Enblend and Enfuse with image cache])
-    AC_MSG_RESULT(yes)
-    enable_image_cache=yes
-else
-    AC_MSG_RESULT(no)
-    enable_image_cache=no
-fi
-
 AC_MSG_CHECKING(whether to compile with OpenMP)
 openmp_default="no"
 AC_ARG_ENABLE(openmp,
@@ -534,14 +579,25 @@
     AC_MSG_RESULT(no)
     enable_openmp=no
 else
-    if test "$enable_image_cache" = yes; then
-        AC_MSG_WARN([[image cache and OpenMP support are mutually exclusive]])
-        AC_MSG_WARN([[only configure like this if you want to develop a reentrant image cache]])
-        warnings=`echo -e "$warnings\n WARNING: Image cache and OpenMP are both enabled!  You are a developer, aren't you?"`
-    fi
     enable_openmp=yes
 fi
 
+built_in_opencl_path=/usr/local/share/enblend/kernels:/usr/share/enblend/kernels
+AC_ARG_WITH([opencl-path],
+            AS_HELP_STRING([--with-opencl-path=<PATH>],
+                           [set to-be-built-in OpenCL search path]),
+            [opencl_path="$withval"],
+            [opencl_path="$built_in_opencl_path"])
+AC_DEFINE_UNQUOTED(DEFAULT_OPENCL_PATH, ["$opencl_path"], [Default search path for OpenCL files])
+AC_DEFINE(PREFER_SEPARATE_OPENCL_SOURCE, 1,
+          [Define if you want to access OpenCL files, not compile-in their string equivalents])
+
+
+AX_OPENCL([C++])
+CFLAGS="$CFLAGS $CL_CFLAGS"
+CXXFLAGS="$CXXFLAGS $CL_CFLAGS"
+LIBS="$LIBS $CL_LIBS"
+
 AC_CONFIG_FILES([doc/Makefile
                  doc/examples/Makefile
                  doc/examples/enfuse/Makefile
@@ -563,6 +619,7 @@
    CXXFLAGS:                       ${CXXFLAGS:-<none required>}
    LDFLAGS:                        ${LDFLAGS:-<none required>}
    LIBS:                           ${LIBS:-<none required>}
+   STATIC_LIBS:                    ${STATIC_LIBS:-<none defined>}
    EXTRA_LIBS (optional):          ${EXTRA_LIBS:-<none selected>}
 
  can build all documentation:      ${can_build_doc}${no_doc_reason}
@@ -572,7 +629,8 @@
    enable malloc debugging:        ${enable_dmalloc}
    enable dynamic loading          ${enable_dynload} ${dynload_implementation}
    OpenEXR image format            ${have_exr}
-   use image cache:                ${enable_image_cache}
    use OpenMP:                     ${enable_openmp}
+   use OpenCL:                     ${enable_opencl} (search path: $opencl_path)
+   use Exiv2:                      ${use_exiv2}
    use TCMalloc:                   ${use_tcmalloc}
 ${warnings}])
diff -u enblend-enfuse-4.2/ConfigureChecks.cmake enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/ConfigureChecks.cmake
--- enblend-enfuse-4.2/ConfigureChecks.cmake	2015-12-11 13:06:42.000000000 -0500
+++ enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/ConfigureChecks.cmake	2019-11-26 08:00:20.000000000 -0500
@@ -186,52 +186,3 @@
   int main(){char b;char *a = strerror_r(0, &b, 0); return(0);}
   "
   STRERROR_R_CHAR_P)
-
-SET(SAFE_CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS}")
-SET(CMAKE_REQUIRED_FLAGS "${CMAKE_CXX_FLAGS}")
-check_cxx_source_compiles(
-  "
-    #include <string>
-    #include <type_traits>
-    #include <utility>
-    
-    int main()
-    {
-      std::string s(\"foo\");
-      const std::string& const_s = std::as_const(s);
-      return 0;
-    }
-  "  
-  
-  HAVE_AS_CONST
-)
-
-check_cxx_source_compiles(
-  "
-    #include <filesystem>
-    #include <string>
-    
-    int main()
-    {
-      std::tr2::sys::path filepath;
-      std::string s=filepath.filename().string();
-      return 0;    
-    };
-  "
-  HAVE_STD_FILESYSTEM
-)
-
-SET(CMAKE_REQUIRED_FLAGS "${SAFE_CMAKE_REQUIRED_FLAGS}")
-  
-# workaround for older boost versions (<1.55)
-set(CMAKE_REQUIRED_INCLUDES ${Boost_INCLUDE_DIR})
-check_cxx_source_compiles(
-  "
-    #include <boost/config/suffix.hpp>
-    #ifndef BOOST_FALLTHROUGH
-      #error \"BOOST_FALLTHROUGH not defined\"
-    #endif
-    int main(){return(0);}
-    "
-    HAVE_BOOST_FALLTHROUGH
-)
Only in enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913: contrib
Only in enblend-enfuse-4.2: depcomp
Common subdirectories: enblend-enfuse-4.2/doc and enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/doc
Only in enblend-enfuse-4.2: install-sh
Common subdirectories: enblend-enfuse-4.2/m4 and enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/m4
Only in enblend-enfuse-4.2: Makefile.in
Only in enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913: Makefile.scm
Only in enblend-enfuse-4.2: missing
diff -u enblend-enfuse-4.2/NEWS enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/NEWS
--- enblend-enfuse-4.2/NEWS	2016-03-29 03:55:26.000000000 -0400
+++ enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/NEWS	2019-11-26 08:00:20.000000000 -0500
@@ -1,6 +1,57 @@
-* Version 4.2
+* Version 4.3
 
-Released March 29, 2016.
+Unreleased.  Current line of development.
+
+** Improvements
+
+- All deprecated options and features of version 4.2 have been
+  removed.
+
+- Enblend and Enfuse transfer EXIF, IPTC, and XMP meta-data from the
+  input images to the output images.
+
+- Both Enblend and Enfuse can now send their output to files without a
+  filename extension, which included devices, like e.g. "/dev/stdout".
+  The output format is PNM (Portable aNyMap).  The same holds for the
+  output mask file.  The common abbreviation `-' for `/dev/stdout' is
+  understood.
+
+- Enfuse: The default saturation weight has been set to zero.  This
+  makes Enfuse's behavior more predictable.
+
+
+** New Commandline Options
+
+- To circumnavigate the lack of alpha-channel support of some common
+  image formats, add option `--output-mask', to let the user define a
+  mask filename for the output.
+
+
+** Developer Stuff
+
+- Configuration switches `--enable-image-cache' and its opposite were
+  downgraded to nops.
+
+- The new configuration option "--enable-partially-static-linking"
+  controls whether all libraries are linked in their shared versions
+  (default) or some performance critical libraries are linked in with
+  the static versions.
+
+
+** Package Maintainer Stuff
+
+- All Boost dependencies have been scrapped.
+
+- The environment variable SOURCE_DATE_EPOCH overrides the build
+  timestamp as recorded by the signatures.  See
+          https://reproducible-builds.org/specs/source-date-epoch/
+  for details.
+
+
+
+* Version 4.2  "Compressor Road"
+
+Released on March 29, 2016.
 
 ** Improvements
 
@@ -45,6 +96,14 @@
   is now up to the user.  The default still is the Gauss function as
   in all Enfuse versions before.
 
+- Enblend and Enfuse now both can make use of the tremendous computing
+  power in modern graphics cards.  To that end the binaries must be
+  compiled with OpenCL support and the necessary drivers and or
+  libraries must be installed on the host system.
+
+- Enfuse can access the OpenCL compiler to allow for user-defined
+  exposure weighting functions specified in OpenCl (source) files.
+
 
 ** New Commandline Options
 
@@ -85,20 +144,19 @@
   Options `--exposure-mu' and `--exposure-sigma' are scheduled for
   withdrawal in a later version of Enfuse.
 
+- For a long time Enblend has had an option to run the seam-line
+  optimizer on the GPU.  Now, both Enblend and Enfuse sport `--gpu'
+  options to offload computationally intensive tasks to any
+  OpenCL-compatible GPU device.
+
+  On systems with more than one device `--prefer-gpu' selects the
+  desired GPU and `--show-gpu-info' lists the available GPUs.
+
 - Long-time option `-a' got a long-form sibling called
   `--pre-assemble'.  The long form can be negated as
   `--no-pre-assemble', which is the default.
 
 
-** Idle Commandline Options
-
-- The Stable Branch of Enblend/Enfuse does not support any
-  acceleration with GPUs as the current Development Branch does.  For
-  commandline compatibility and easy script migration the options
-  `--gpu', `--prefer-gpu', and `--show-gpu-info' are accepted, but do
-  not have any functionality behind them.
-
-
 ** Developer Stuff
 
 - During configuration the name of Vigra's import-export library can
@@ -315,7 +373,7 @@
   ("--disable-image-cache").  Speedups of up to 30% have been reported
   on the amd64 architecture.
 
-- Enblend and Enfuse accept repsonse files in addition to literal
+- Enblend and Enfuse accept response files in addition to literal
   image files.  Response files contain lists of image filenames or
   names of other response files.
 
@@ -386,7 +444,7 @@
 - All Enfuse options have been converted to Enblend's option naming
   scheme.  This is, camel-casing has been replaced by lowercase plus
   dashes.  The new option name are more systematically constructed,
-  too.  The old options will completely dissapear in the next release,
+  too.  The old options will completely disappear in the next release,
   4.1.
 
                Old Option                New Option
diff -u enblend-enfuse-4.2/README enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/README
--- enblend-enfuse-4.2/README	2016-03-28 05:44:02.000000000 -0400
+++ enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/README	2019-11-26 08:00:20.000000000 -0500
@@ -1,5 +1,5 @@
 Copyright (C) 2004-2009 Andrew Mihal.
-Copyright (C) 2009-2016 Christoph Spiel.
+Copyright (C) 2009-2019 Christoph Spiel.
 
 This file is part of Enblend.
 
@@ -50,6 +50,38 @@
 Makefiles contain pattern rules.
 
 
+** Hints for the migration to C++17
+
+*** Compiler
+
+Some C++ compilers already default to the C++17 Standard, others may
+have to be put into a conforming mode of operation with, for example,
+    -std=gnu++17
+or
+    -std=c++17
+in CXXFLAGS.
+
+
+*** Little CMS2
+
+Depending on the specific C++ compiler and the particular version of
+the lcms2 library it may or may not be necessary to add
+        -DCMS_NO_REGISTER_KEYWORD
+to CPPFLAGS because in C++17 `register' is a deprecated and reserved
+keyword.
+
+Library lcms2 is a mandatory prerequisite for both Enblend and Enfuse.
+
+
+*** Exiv2
+
+A sufficiently recent Exiv2 library is required because C++17 has
+abandoned std::auto_ptr<>, which older versions of the library heavily
+rely on; newer versions use std::unique_ptr<>.
+
+Library exiv2 is optional (see `--with-exiv2').
+
+
 ** Tarball
 
         ./configure YOUR-OPTIONS-IF-ANY-GO-HERE
@@ -128,6 +160,18 @@
 binaries.
 
 
+** --enable-partially-static-linking=NO/yes
+
+Link against static libraries if they are performance critical for
+Enblend or Enfuse.  Currently, these are the GSL libraries and
+LittleCMS2.  The performance gain is some five percent at the cost of
+only slightly larger binaries.  The configuration option may also be
+interesting if the target system should not require GSL libraries.
+
+If partial static linking is on, configure(1) looks for "libatlas.a"
+and "libcblas.a" to replace "libgslcblas.a" and use an optimized BLAS.
+
+
 ** --enable-openmp=yes/NO
    -DENABLE_OPENMP=ON/off    (CMake)
 
@@ -149,6 +193,28 @@
 on the usage of these variables.
 
 
+** --enable-opencl=YES/no
+
+Enable parallel execution of parts of Enblend and Enfuse with OpenCL
+on machines providing the proper hardware.  See
+        http://www.khronos.org/opencl/
+As Enblend and Enfuse are written in C++ we prefer the C++-header of
+OpenCL, namely "cl.hpp".  This file does not always come
+(pre-)installed, but can be downloaded from the canonical site,
+Khronos OpenCL API Registry
+        http://www.khronos.org/registry/cl/
+
+Currently, we compile and test against OpenCL API version 1.2.  The
+header files associated with the older versions 1.0 and 1.1 are
+flawed; They do not compile with some compilers (e.g. CLang++).
+
+It is advisable to match the API versions of C-headers and the
+C++-header file.  On systems with multiple header hierarchies
+(e.g. /usr/include and /usr/local/include) particular care must be
+taken that the correct headers are used at configuration time and at
+compile time.
+
+
 ** --enable-debug=yes/NO
 
 Compile without optimizations and enable all debug-checking code.  The
@@ -162,6 +228,13 @@
 unsuccessful for GLib implementation (gmodule).
 
 
+** --with-exiv2=CHECK/yes/no
+
+Use Exiv2 library for meta-data transfer of the input images to the
+result.  Without this library Enblend or Enfuse will not copy any EXIF
+meta data.
+
+
 ** --with-tcmalloc=CHECK/yes/no
    -DENABLE_TCMALLOC=OFF/on    (CMake)
 
@@ -449,13 +522,13 @@
 
 From the command line:
 
-    $ sudo port install make lcms boost jpeg tiff libpng OpenEXR mercurial
+    $ sudo port install make lcms jpeg tiff libpng OpenEXR mercurial
 
 Note that Enblend/Enfuse can be build via AutoConf/AutoMake and via
 CMake.  The latter is experimental.  If you want to build via CMake,
 add "cmake" to the previous command line after "mercurial" like this:
 
-    $ sudo port install make lcms boost jpeg tiff libpng OpenEXR mercurial cmake
+    $ sudo port install make lcms jpeg tiff libpng OpenEXR mercurial cmake
 
 
 **** Compile
@@ -534,10 +607,6 @@
 
 Enblend/Enfuse also depend on the following libraries:
 
-- Boost  [1.60 in boost_1_60_0]
-    - Only header files are used by default.
-    - Optionally, Enblend/Enfuse can use the Filesystem Library.
-      However, this library needs to compiled against STLport.
 - Little-CMS2  [2.4 in lcm2-2.4]
 
 
diff -u enblend-enfuse-4.2/README.txt enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/README.txt
--- enblend-enfuse-4.2/README.txt	2016-03-28 05:44:02.000000000 -0400
+++ enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/README.txt	2020-05-12 10:23:57.000000000 -0400
@@ -1,617 +1 @@
-Copyright (C) 2004-2009 Andrew Mihal.
-Copyright (C) 2009-2016 Christoph Spiel.
-
-This file is part of Enblend.
-
-
-* Programs
-
-This packages contains the programs Enblend and Enfuse.  The source
-code and further information about Enblend are available at:
-        http://enblend.sf.net
-
-
-** Enblend
-
-Enblend is a tool for compositing images using a Burt&Adelson
-multiresolution spline.  This technique tries to make the seams
-between the input images invisible.  The basic idea is that image
-features should be blended across a transition zone proportional in
-size to the spatial frequency of the features.  For example, objects
-like trees and windowpanes have rapid changes in color.  By blending
-these features in a narrow zone, you will not be able to see the seam
-because the eye already expects to see color changes at the edge of
-these features.  Clouds and sky are the opposite.  These features have
-to be blended across a wide transition zone because any sudden change
-in color will be immediately noticeable.
-
-Enblend expects each input file to have an alpha channel.  The alpha
-channel should indicate the region of the file that has valid image
-data.  Enblend compares the alpha regions in the input files to find
-the areas where images overlap.  Alpha channels can be used to
-indicate to Enblend that certain portions of an input image should not
-contribute to the final image.
-
-Enblend does not align images for you.  Use a tool like Hugin or
-PanoTools to do this.  The files produced by these programs are
-exactly what Enblend is designed to work with.
-
-
-** Enfuse
-
-Enfuse is a tool for automatic exposure blending, contrast blending
-and much more.  It can be used to fuse an exposure bracketed step
-automatically into a nicely looking image.
-
-
-* Installation
-
-GNU Make is required to build the project, because some of the
-Makefiles contain pattern rules.
-
-
-** Tarball
-
-        ./configure YOUR-OPTIONS-IF-ANY-GO-HERE
-        make
-        make install
-
-
-** Mercurial Repository
-
-*** AutoConf/AutoMake
-
-In the root directory of the project issue:
-
-        make --makefile=Makefile.scm
-        ./configure YOUR-OPTIONS-IF-ANY-GO-HERE
-        make
-        make install
-
-The package fully supports VPATH builds.  Thus the following command
-sequence builds in a separate directory.
-
-        cd ROOT-DIRECTORY
-        make --makefile=Makefile.scm
-        mkdir BUILD-DIR
-        cd BUILD-DIR
-        ROOT-DIRECTORY/configure YOUR-OPTIONS-IF-ANY-GO-HERE
-        make
-        make install
-
-If a less verbose output of the Make-process is desired, pass
-`--enable-silent-rules' to configure(1), or `V=0' to make(1).  As out
-build uses recursion make(1) reports "Entering directory" and "Leaving
-directory" which can only be suppressed with passing option
-`--no-print-directory' to make(1).
-
-
-*** CMake
-
-The canonical way to build Enblend and Enfuse is with Autotools, this
-is, autoconf(1) and automake(1).  An alternative CMake build has been
-added since version 4.0.
-
-The CMake build strives to replicate the Autotools build.  It may or
-may not work for you.  It is currently maintained but not supported,
-meaning that it could break anywhere anytime in the future.
-
-        cmake .
-        make
-        make install
-
-Analogously to Autotools, CMake allows for VPATH builds:
-
-        mkdir BUILD-DIR
-        cd BUILD-DIR
-        cmake ROOT-DIRECTORY
-        make
-        make install
-
-
-* Specific Configuration Options
-
-Among the usual configuration options of the GNU autoconf system, the
-configure(1) script offers the following options to tailor Enblend and
-Enfuse.  Remember that configure(1) creates a file called "config.h"
-that can serve for fine-tuning the configuration.
-
-We write the default values of all configuration options in capital
-letters.
-
-
-** --enable-on-demand-dynlink=CHECK/yes/no
-
-Link Enblend and Enfuse binaries with flags that instruct the dynamic
-linker to delay loading dynamic libraries until they are actually
-needed.  This feature slightly decreases the load-time of the
-binaries.
-
-
-** --enable-openmp=yes/NO
-   -DENABLE_OPENMP=ON/off    (CMake)
-
-Parallelize parts of Enblend and Enfuse with OpenMP.  See
-        http://www.openmp.org/
-
-If auto-detection of OpenMP misfires, set appropriate OPENMP_CXXFLAGS
-during configuration.  For example, CLang++ may need the argument-form
-of option `-fopenmp':
-        -fopenmp=libiomp5
-In addition OpenMP support libraries may live in non-standard places.
-These too can be specified in OPENMP_CXXFLAGS, because the flags will
-be used for compilation and linking.
-
-When OpenMP support has been enabled, the utilization of special
-features of the actual, underlying OpenMP implementation can be
-controlled as usual with the environment variables OMP_NUM_THREADS,
-OMP_NESTED and OMP_DYNAMIC.  See the OpenMP specification for details
-on the usage of these variables.
-
-
-** --enable-debug=yes/NO
-
-Compile without optimizations and enable all debug-checking code.  The
-default is "no", build an optimized version without debugging symbols.
-
-
-** --with-dl=CHECK/yes/no/dl/gmodule
-
-Enable user-defined exposure weight functions in Enblend.  With
-argument "check", test for POSIX-compatible dynamic-loader (dl) and if
-unsuccessful for GLib implementation (gmodule).
-
-
-** --with-tcmalloc=CHECK/yes/no
-   -DENABLE_TCMALLOC=OFF/on    (CMake)
-
-Compile with Google's TCMalloc.  This library generally improves
-memory allocation performance.  Enblend and Enfuse prefer TCMalloc's
-functions inside OpenMP parallel regions and thereby reduce the load
-of the operating system's memory allocator.
-
-Find more information on TCMalloc at
-        http://goog-perftools.sourceforge.net/doc/tcmalloc.html
-
-
-** --with-dmalloc=yes/NO
-
-Compile with the debug-malloc library.  The library is available at
-http://www.dmalloc.com/.
-
-
-** --with-openexr=CHECK/yes/no
-
-Build with support for reading and writing OpenEXR images.  See
-http://www.openexr.com/ for the required libraries.
-
-
-* CMake Specifics
-
-** Configuration Options
-
-These options only apply to CMake.
-
-
-*** -DCPACK_BINARY_<SYSTEM>:BOOL=OFF/on
-
-Create a package for the specified <SYSTEM>, where <SYSTEM> is "DEB",
-"RPM", or "NSIS".
-
-
-*** -DCPACK_BINARY_<SYSTEM>:BOOL=ON/off
-
-Create other packages for the specified <SYSTEM>, where <SYSTEM> is
-"TBZ2", "TGZ", "STGZ", or "TZ".
-
-
-*** -DPACK_SOURCE_<SYSTEM>:BOOL=OFF/on
-
-Create a source package for the specified <SYSTEM>, where <SYSTEM> is
-"TBZ2", "TGZ", "TZ", or "ZIP".
-
-
-** Configuration Example
-
-Creating a RedHat package on OpenSuSE
-
-        cmake . \
-            -DDOC=ON \
-            -DENABLE_OPENMP=ON \
-            -DCPACK_BINARY_RPM:BOOL=ON
-        make package
-
-This will create a package enblend-4.0.595-Linux.rpm, which you may
-install with
-
-        sudo rpm -U enblend-4.0.595-Linux.rpm
-
-
-** Important Configured Make(1) Targets
-
-help                     List all available targets.
-
-edit_cache               If  cmake-gui(1) is installed, start the GUI
-                         to edit the "CMakeCache.txt" file.
-
-enblend                  Create an Enblend executable.
-
-enfuse                   Create an Enfuse executable.
-
-man                      Create the manual pages for Enblend and
-                         Enfuse.
-
-install                  Install everything in the proper places.
-
-package                  Create package(s) specified with the
-                         CPACK_BINARY_<SYSTEM>:BOOL parameter of
-                         CMake.  It is preferred to create a package
-                         and use the package manager to install it
-                         rather than using the "install" target.
-
-rebuild_cache            In a changed environment (e.g. newly
-                         installed packages) this is the way to
-                         discard cached values, so that CMake again
-                         starts searching for everything.
-
-package_source           Build a source package like autotools
-                         "make dist".
-
-
-* Extra Make(1) Variables
-
-** Compilation
-
-You can override Makefile variables the usual way.  In addition the
-build process supplies several variables, all starting with "EXTRA",
-that add their value to the "usual suspects".  These are
-
-        CPPFLAGS  --  EXTRACPPFLAGS
-        CFLAGS    --  EXTRACFLAGS
-        CXXFLAGS  --  EXTRACXXFLAGS
-        LDFLAGS   --  EXTRALDFLAGS
-
-All these "EXTRA" are intentionally unaffected by the
-Automake/Autoconf generation of the Makefiles proper.  That way
-developers can override configured settings in any make(1) run or
-quickly build the project with new combinations of flags.
-
-For example, to quickly add an additional define, use
-        make EXTRACPPFLAGS=-DDEBUG_8BIT_ONLY
-To compile for coverage analysis, say
-        make EXTRACXXFLAGS="-O0 --coverage" EXTRALDFLAGS="--coverage"
-analogously for profiling analysis
-        make EXTRACXXFLAGS=-pg EXTRALDFLAGS=-pg
-
-
-** Documentation Generation
-
-We have introduced the variable
-        DYNAMIC_TEX_PREAMBLE
-to give the maintainers and packagers better control over the
-generation of the documentation.  The contents of the variable goes
-_before_ `\documentclass' so that even the document class can be
-selected dynamically.
-
-DYNAMIC_TEX_PREAMBLE can define the argument-less macros
-`\documentclassoptions' which defines LaTeX \documentclass options
-(thingies within square brackets) and `\finishdynamicpreamble' which
-is expanded right before `\begin{document}' and thus _after_ all
-packages have been loaded.
-
-Some possibilities for `DYNAMIC_TEX_PREAMBLE' are
-        \hyperreftrue
-        \referencemanualtrue
-        \usepackage[showframe]{geometry}
-        \def\documentclassoptions{11pt,twoside}
-        \def\finishdynamicpreamble{\overfullrule=2pt\relax}
-
-
-* Documentation
-
-The distribution includes the manual pages in
-        src/enblend.1
-        src/enfuse.1
-
-After the configuration you can build documentation in PostScript,
-HTML, and possibly PDF formats.
-        make ps
-        make pdf
-        make html
-
-The default paper size for all non-HTML formats is DIN A4.  Override
-make(1) variable `PAPERSIZE' to get e.g. Letter format.  The default
-resolution is 600 dpi; override it with `PRINT_RESOLUTION'.  The
-_printed_ versions can be formatted in two different styles: the usual
-LaTeX `report' and `refman' style that borrows from old reference
-manuals.  Pass
-        DYNAMIC_TEX_PREAMBLE=\referencemanualtrue
-to make(1) when generating a non-HTML format to get the `refman'
-style.  The reference manual style does _not_ work with HTML, in other
-words, hevea(1) will barf.  By default only PDFLaTeX turns on
-HyperRef, for all other translators (in particular if PDF is
-indirectly generated) it must be enabled with
-        DYNAMIC_TEX_PREAMBLE=\hyperreftrue
-
-
-** HTML Generation
-
-The default target `html' builds the HTML documentation as monolithic
-files, which means the single HTML file "enblend.html" for Enblend and
-"enfuse.html" for Enfuse.  To build split versions with one chapter
-per file of each of them use the target `split-html', where the root
-files will be `enblend-index.html' and `enfuse-index.html' .  Install
-the broken-down version with `install-split-html'.
-
-
-** PDF Generation
-
-The canonical way to reach at PDF files i.e.
-        make pdf
-is directly, via PDFLaTeX: LaTeX -> PDF.  If for some reason this path
-does not work, we provide two alternatives.
-
-
-*** Alternative 1: LaTeX -> DVI -> PDF
-
-Use dvipdfmx(1) to convert the final DVI files to PDF.  It is
-recommended to issue a
-        make clean
-before starting to construct the PDF files this way!  Add the
-following commands to DYNAMIC_TEX_PREAMBLE:
-    - To get correctly positioned graphics
-        \PassOptionsToPackage{dvipdfmx}{graphicx}
-    - For all the hyperref goodies (e.g. clickable cross refferences)
-        \PassOptionsToPackage{dvipdfmx}{hyperref}\hyperreftrue
-    - To get the right color associations
-        \PassOptionsToPackage{dvipdfmx}{color}
-Sometimes
-        EXTRA_LATEX_FLAGS='-shell-escape'
-may be required.  The targets are called "enblend.dvi.pdf" and
-"enfuse.dvi.pdf", rename the products if necessary.  See
-doc/Makefile.am for details.
-
-
-*** Alternative 2: LaTeX -> DVI -> PostScript -> PDF
-
-Use GhostScript (gs(1)) in the incarnation of ps2pdf(1) to convert the
-final PostScript files to PDF.  None of the hyperref goodies makes it
-through dvips(1).  The targets are called "enblend.ps.pdf" and
-"enfuse.ps.pdf"; rename if necessary; see doc/Makefile.am for details.
-
-
-** Required Tools For Building the Documentation
-
-Note that some additional packages are required to build these
-formats:
-        convert            - ImageMagick's swiss army knife of graphics
-                             format conversion found at
-                             http://www.imagemagick.org/.
-        dvips              - Convert TeX's DVI format to PostScript.
-        gnuplot            - Render plots (.gp) in text, PNG, EPS, and PDF
-                             formats.  Check out http://www.gnuplot.info/.
-        hevea              - Convert LaTeX to HTML.  Find more information
-                             at http://hevea.inria.fr/.
-        latex, pdflatex    - Typeset the LaTeX documents in DVI or PDF.
-        makeindex          - Index generation for several typesetters.
-        dot                - Graph generation.  Part of the `GraphViz' suite.
-                             See http://www.graphviz.org/.
-        rsvg-convert       - Convert SVG to a variety of other formats, not
-                             only raster images, but also EPS.
-                             Check out http://librsvg.sourceforge.net/.
-
-The tool texloganalyser(1) is optional.  Its sole use is to beautify
-LaTeX output in non-verbose (V=0) mode.
-
-
-* Operating System Specific Instructions and Hints
-
-** GNU/Linux
-
-*** High-Performance Binaries
-
-To configure and compile high-performance versions of Enblend and
-Enfuse configure SMP boxes with
-        --enable-openmp
-and pass
-        EXTRACXXFLAGS="-march=native -O2"
-to make(1).  The resulting binaries are pretty fast, although other
-configuration options or compiler flags might improve their
-performance even more.
-
-
-*** Xmi and Xi
-
-To avoid direct linkage to the two X11 libraries Xmi and Xi add
-"--without-x" to the parameters of configure(1).
-
-
-** MacOSX
-
-*** Compiling on MacOSX
-
-On MacOSX you can build Enblend/Enfuse with Fink and with MacPorts.
-This README only describes the MacPorts way.
-
-
-**** Prerequisites
-
-- XCode: Install the XCode version for your MacOSX version.  Download it
-  from
-          http://developer.apple.com/tools/download/
-
-- MacPorts: Install MacPorts for your MacOSX version.  Download it
-  from
-          http://www.macports.org/
-
-
-**** Provide necessary dependencies
-
-From the command line:
-
-    $ sudo port install make lcms boost jpeg tiff libpng OpenEXR mercurial
-
-Note that Enblend/Enfuse can be build via AutoConf/AutoMake and via
-CMake.  The latter is experimental.  If you want to build via CMake,
-add "cmake" to the previous command line after "mercurial" like this:
-
-    $ sudo port install make lcms boost jpeg tiff libpng OpenEXR mercurial cmake
-
-
-**** Compile
-
-As MacPorts resides in /opt/local, which is not a standard
-library/binary/include path for most source packages, you need to
-specify that during the configure step.
-
-Via AutoConf/AutoMake:
-
-    cd enblend
-    make --makefile=Makefile.scm
-    mkdir build
-    cd build
-    CPPFLAGS=-I/opt/local/include LDFLAGS=-L/opt/local/lib ../configure
-    make
-    sudo make install
-
-
-Via CMake:
-
-    cd enblend
-    make --makefile=Makefile.scm
-    mkdir build
-    cd build
-    CPPFLAGS=-I/opt/local/include LDFLAGS=-L/opt/local/lib cmake ..
-    make
-    sudo make install
-
-This will install Enblend/Enfuse in /usr/local.
-
-
-**** Other compilation options
-
-Please also check the AutoConf/AutoMake and CMake variables for more
-build options.
-
-
-** Win
-
-*** General
-
-There are two different archives: one with 32-bit executables, the
-other one with 64-bit executables. Both variants are compiled with
-multi-threaded support (via OpenMP).
-
-
-*** Compiling on Windows
-
-**** Prerequisites
-
-You will need to following tools for compiling:
-
-- MS Visual C++ 2015, works also with Community Edition
-  (older compiler may work, but have not been tested)
-- CMake, at least version 2.8
-- Perl, e.g. ActiveState Perl
-
-CMake expects all sources and libraries in one folder.  So, create a
-folder, e.g., "d:\src", extract Enblend/Enfuse into this folder, and
-also put all libraries into this folder.
-
-You need the following libraries for reading and writing different
-image formats.  We state the version and the folder name of the
-libraries used as of March 2016 in square brackets.
-
-- libtiff  [libtiff-4.0.6 in tiff]
-- zlib, required by libtiff  [1.2.8 in zlib]
-- libjpeg (optional)  [jpeg-9b]
-- libpng (optional)  [libpng-1.6.21 in libpng]
-- OpenEXR and IlmBase (optional), compiled libraries are
-  expected in folder "Deploy"  [OpenEXR-2.2.0 and IlmBase-2.2.0]
-- vigra, required, should be compiled against same
-  libtifff, libjpeg, libpng and OpenEXR as used for Enblend/Enfuse
-  [1.10.0 in vigra]
-
-Enblend/Enfuse also depend on the following libraries:
-
-- Boost  [1.60 in boost_1_60_0]
-    - Only header files are used by default.
-    - Optionally, Enblend/Enfuse can use the Filesystem Library.
-      However, this library needs to compiled against STLport.
-- Little-CMS2  [2.4 in lcm2-2.4]
-
-
-**** Compile
-
-1. Start cmake-gui or cmake-setup.
-2. Enter path to Enblend/Enfuse source in "Where is the source code".
-3. Enter path where to build the executable,
-   e.g. "d:\src\build-enblend".  In following, it will be denoted as
-   <BUILDDIR>.
-4. Select "Configure" when asked for a generator select the
-   appropriate generator.
-5. Activate the appropriate options.
-
-
-***** ENABLE_OPENMP=on/OFF
-
-Parallelize parts of Enblend and Enfuse with OpenMP.  See
-        http://www.openmp.org/
-
-If OpenMP support has been enabled, the utilization of special
-features of the actual, underlying OpenMP implementation can be
-controlled as usual with the environment variables OMP_NUM_THREADS,
-OMP_NESTED and OMP_DYNAMIC.  See the OpenMP specification for details
-on the usage of these variables.
-
-
-***** ENABLE_SSE2=on/OFF
-
-Creates executable which make use of the advanced features (SSE2) of
-modern processors.
-
-
-***** DOC=on/OFF
-
-Building the documentation works also on Windows.  It requires more
-tools (see above).  Some tools have several different variants for
-Windows available, but not all work with Enblend/Enfuse documentation.
-If you experience errors try another variant or version.
-
-
-**** Compile (cont.)
-
- 6. Select "Configure".  Maybe you need start the configuration step
-    several times until all dependencies are resolved.
- 7. Select "Generate".
- 8. Close CMake.
- 9. Open solution file <BUILDDIR>\enblend.sln.
-10. Select "Release" in Solution Configuration pull-down menu, and
-    then choose Build > Build Solution.  This step takes some time.
-11. Select project "INSTALL" in Solution Explorer, and then choose
-    Build > Project Only > Build Only INSTALL.
-12. Close Visual C++ 2008 Express Edition
-13. Find the generated executables in <BUILDDIR>\INSTALLDIR\FILES.
-
-
-* License
-
-Enblend is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2 of the License, or
-(at your option) any later version.
-
-Enblend is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with Enblend; if not, write to the Free Software
-Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-
-
-
-Local Variables:
-mode: outline
-End:
+README
\ No newline at end of file
Common subdirectories: enblend-enfuse-4.2/src and enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/src
Only in enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913: test
Only in enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913: TODO-3.x
diff -u enblend-enfuse-4.2/VERSION enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/VERSION
--- enblend-enfuse-4.2/VERSION	2016-03-29 03:55:57.000000000 -0400
+++ enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913/VERSION	2019-11-26 08:00:20.000000000 -0500
@@ -1 +1 @@
-4.2
+4.3-209eafc9748b
Only in enblend-code-b236375ad1a80df4d0b4b15b3f8ff8e15cd31913: win32
